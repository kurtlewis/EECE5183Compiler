In parsing grammars, sometimes rules need to be modified to support predictive
parsing. This involves making rules right recursive when they are left
recursive, and defining 'first' sets for rules - the possible set of terminal
symbols that are the first appearing terminal symbols for any evaluation of
that rule.

This file does not attempt to rewrite the entire grammar, it is intended to be
used a supplement to the official language spec. Only those rules which are
affected by predictive parsing needs are rewritten here, and not always in their
entirety.

The rules below appear in the same order they are referenced in the language
specification.

===== First Sets =====
* The items in the sets here are the first appearing terminals for all possible
* evaluations of the rule on the left.
* The notation here is kind of my own design
* Term on the left = rule I'm calculating the first set for
* Set on the right, the first set
* Values in "<>" are other rules which doesn't make sense without the context
* that I can identify some things as identifiers and strings in the lexer,
* so I can just know what those are
procedure_declaration => {procedure}
variable_declaration => {variable}
type_declaration => {type}
parameter_list => {variable}
parameter => {variable}
procedure_call => {<identifier>}
assignment_statement => {<identifier>}
destination => {<identifier>}
if_statement => {if}
loop_statement => {for}
return_statement => {return}
expression => {not, <arithOp>}
arithOp => {<relation>}
relation => {<term>}
term => {<factor>}
factor => {(, <identifier>, -, <number>, <string>, true, false}
name => {<identifier>}
argument_list => {<expression>}
number => {<number>}
string => {<string>}


===== Right Recursive Rules =====
* Rewritng grammars to make them right recursive
<expression> => [_not_] <arithOp> <expression_tail>
<expression_tail> => _&_ <arithOp> <expression_tail> |
                     _|_ <arithOp> <expression_tail> |
                     *empty*
<arithOp> => <relation> <arithOp_tail>
<arithOp_tail> => _+_ <relation> <arithOp_tail> |
                  _-_ <relation> <arithOp_tail> |
                  *empty*
<relation> => <term> <relation_tail>
<relation_tail> => _<_ <term> <relation_tail> |
                   _>=_ <term> <relation_tail> |
                   _<=_ <term> <relation_tail> |
                   _>_ <term> <relation_tail> |
                   _==_ <term> <relation_tail> |
                   _!=_ <term> <relation_tail> |
                   *empty*
<term> => <factor> <term_tail>
<term_tail> => _*_ <factor> <term_tail> |
               _/_ <factor> <term_tail |
               *empty*


===== Left Factoring =====
* Rewriting grammar rules to make the grammar LL(1) *
<procedure_call> and <name> are both only called from <factor>. They both have
a first set of <identifier> which makes the grammar in it's original form,
not LL(1).

The solution here is to do a new rule which handles both of them. I'm going to
call it <reference>. I will be removing ParseName and ParseProcedureCall
and replacing them with ParseReference

<reference> => <identifier> _(_ [ <argument_list> ] _)_ |
               <identifier> [ _[_ <expression _]_ ]

